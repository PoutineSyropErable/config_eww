;; Define the system widget
(defwidget system_widget []
  (box
    :orientation "vertical"
    :spacing 10
    :class "system-widget"
    
    ;; User Profile
    (box
      :orientation "horizontal"
      :spacing 10
      (image :path "~/.config/eww/profile.jpg" :width 40 :height 40 :class "profile-picture") ;; Add a profile picture here
      (box
        :orientation "vertical"
        (label :text "{user}@{hostname}" :class "username") ;; Replace `{user}@{hostname}` with actual user and hostname info
        (label :text "Uptime: {uptime}" :class "uptime") ;; Replace `{uptime}` with a command to fetch uptime
      )
    )

    ;; Volume Control using `scale` widget with reveal on hover
    (hover-slider-module :var reveal_volume :varname "reveal_volume"  
      (scale :class "volume-slider"
             :min 0
             :max 100
             :value 50
             :onchange "amixer set Master {}%") ;; Adjust command as needed
      (label :class "icon" :text "")) ;; Volume icon

    ;; Wi-Fi Toggle with reveal on hover
    (hover-module :var reveal_wifi :varname "reveal_wifi"
      (label :text "WiFi" :class "icon" :onclick "nmcli radio wifi toggle")
      (label :class "content" :text "{wifi_status}")) ;; Replace `{wifi_status}` with dynamic check

    ;; Bluetooth Toggle with reveal on hover
    (hover-module :var reveal_bluetooth :varname "reveal_bluetooth"
      (label :text "Bluetooth" :class "icon" :onclick "bluetoothctl power toggle")
      (label :class "content" :text "{bluetooth_status}")) ;; Replace `{bluetooth_status}` with dynamic check

    ;; Additional Toggles
    (box
      :orientation "horizontal"
      :spacing 10
      (button :text "Night Light" :class "nightlight-toggle" :onclick "command for night light")
      (button :text "Caffeine" :class "caffeine-toggle" :onclick "command for caffeine")
    )
    
    ;; Media Player
    (box
      :orientation "horizontal"
      :spacing 5
      (button :text "⏮" :onclick "playerctl previous")
      (button :text "⏯" :onclick "playerctl play-pause")
      (button :text "⏭" :onclick "playerctl next")
      (box
        :orientation "vertical"
        (label :text "{song_title}" :class "song-title") ;; Use `playerctl` or similar to get song info
        (label :text "{artist}" :class "song-artist")
      )
    )
  )
)

;; Define the window
(defwindow system_widget_window
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top left" :x 660 :y 20 :width "300px" :height "400px")
  (system_widget)
)

;; Define variables for revealers
(defvar reveal_volume false)
(defvar reveal_wifi false)
(defvar reveal_bluetooth false)

;; Define hover-slider-module widget for reveal-based volume control
(defwidget hover-slider-module [var varname ?class]
  (box :space-evenly false
       :class "hover-module ${class}"
    (revealer-on-hover :var var
                       :varname varname
                       :duration "300ms"
      (children :nth 0)
      (children :nth 1))))

;; Define hover-module widget for reveal-based toggle buttons
(defwidget hover-module [var varname ?class]
  (box :space-evenly false
       :class "hover-module ${class}"
    (hover-switch :var var 
                  :varname varname
                  :duration "300ms"
      (children :nth 0)
      (children :nth 1))))

;; Define widget for on-hover reveal with transition
(defwidget revealer-on-hover [var varname ?duration ?transition]
    (eventbox :class "eventbox"
              :onhover "eww update ${varname}=true"
              :onhoverlost "eww update ${varname}=false"
      (box :space-evenly false
        (revealer :reveal var
                  :transition {transition ?: "slideright"}
                  :duration {duration ?: "500ms"}
          (children :nth 0))
        (children :nth 1))))

;; Define hover-switch widget for toggling visibility on hover
(defwidget hover-switch [var varname ?duration ?transition]
  (eventbox :class "eventbox"
            :onhover "eww update ${varname}=true"
            :onhoverlost "eww update ${varname}=false"
    (box
      :orientation "v"
      :valign "center"
      :space-evenly false
      (revealer :reveal {!var}
                :duration {duration ?: "500ms"}
                :transition {transition ?: "slideup"}
        (children :nth 0))
      (revealer :reveal {var}
                :duration {duration ?: "500ms"}
                :transition {transition ?: "slideup"}
        (children :nth 1)))))

